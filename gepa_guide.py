"""
Guide d√©taill√© : Optimisation avec GEPA
Comprendre et utiliser GEPA pour am√©liorer automatiquement vos prompts
"""

import dspy
from data import trainset, valset, CATEGORIES, PRIORITIES

# =============================================================================
# Qu'est-ce que GEPA ?
# =============================================================================

"""
GEPA (Genetic-Pareto Algorithm) est un algorithme d'optimisation qui :

1. üß¨ √âVOLUTION G√âN√âTIQUE
   - G√©n√®re des variantes de vos prompts
   - Teste chaque variante sur vos donn√©es
   - Garde les meilleures et mute √† nouveau

2. ü§î R√âFLEXION LLM
   - Utilise un LLM pour analyser les erreurs
   - Propose des am√©liorations cibl√©es
   - Apprend des √©checs pour am√©liorer

3. üìä S√âLECTION PARETO
   - √âquilibre plusieurs m√©triques (pr√©cision, rapidit√©, etc.)
   - Garde les solutions non-domin√©es
   - √âvite les optimisations locales

R√©sultat : Vos prompts s'am√©liorent automatiquement, souvent de 10-20% !
"""

# =============================================================================
# Configuration de base
# =============================================================================

def setup_for_gepa():
    """Pr√©parer l'environnement pour GEPA"""
    
    # Configuration du mod√®le
    lm = dspy.LM(
        model='ollama_chat/llama3.1:8b',
        api_base='http://localhost:11434',
        temperature=0.3
    )
    dspy.configure(lm=lm)
    
    print("‚úÖ DSPy configur√© pour GEPA")

# =============================================================================
# D√©finir le module √† optimiser
# =============================================================================

class TicketClassifier(dspy.Signature):
    """Classifier un ticket IT selon cat√©gorie et priorit√©"""
    ticket = dspy.InputField(desc="Description du ticket")
    category = dspy.OutputField(desc=f"Cat√©gorie parmi: {', '.join(CATEGORIES)}")
    priority = dspy.OutputField(desc=f"Priorit√© parmi: {', '.join(PRIORITIES)}")

class BasicClassifier(dspy.Module):
    def __init__(self):
        super().__init__()
        self.classifier = dspy.ChainOfThought(TicketClassifier)
    
    def forward(self, ticket):
        result = self.classifier(ticket=ticket)
        return dspy.Prediction(
            category=result.category,
            priority=result.priority
        )

# =============================================================================
# D√©finir une m√©trique d'√©valuation
# =============================================================================

def exact_match_metric(example, prediction, trace=None, pred_name=None, pred_trace=None):
    """
    M√©trique simple : 1 si tout est correct, 0 sinon
    Compatible avec GEPA DSPy 3.0+
    """
    category_match = prediction.category.strip().lower() == example.category.strip().lower()
    priority_match = prediction.priority.strip().lower() == example.priority.strip().lower()

    return 1.0 if (category_match and priority_match) else 0.0

def partial_match_metric(example, prediction, trace=None, pred_name=None, pred_trace=None):
    """
    M√©trique plus nuanc√©e :
    - 1.0 si les deux sont corrects
    - 0.7 si la cat√©gorie est correcte
    - 0.5 si la priorit√© est correcte
    - 0.0 si rien n'est correct
    Compatible avec GEPA DSPy 3.0+
    """
    category_match = prediction.category.strip().lower() == example.category.strip().lower()
    priority_match = prediction.priority.strip().lower() == example.priority.strip().lower()

    if category_match and priority_match:
        return 1.0
    elif category_match:
        return 0.7  # La cat√©gorie est plus importante
    elif priority_match:
        return 0.5
    else:
        return 0.0

# =============================================================================
# Exemple 1 : Optimisation basique avec GEPA
# =============================================================================

def run_basic_gepa_optimization():
    """
    Exemple simple d'optimisation GEPA
    ‚ö†Ô∏è Prend plusieurs minutes avec Ollama local
    """
    print("\n" + "="*70)
    print("üîß Optimisation GEPA - Exemple basique")
    print("="*70 + "\n")
    
    setup_for_gepa()
    
    # Pr√©parer les donn√©es au format DSPy
    train_examples = [
        dspy.Example(
            ticket=ex['ticket'],
            category=ex['category'],
            priority=ex['priority']
        ).with_inputs('ticket')
        for ex in trainset
    ]
    
    val_examples = [
        dspy.Example(
            ticket=ex['ticket'],
            category=ex['category'],
            priority=ex['priority']
        ).with_inputs('ticket')
        for ex in valset
    ]
    
    # Cr√©er le module √† optimiser
    classifier = BasicClassifier()
    
    # √âvaluer AVANT optimisation
    print("üìä √âvaluation AVANT optimisation...")
    score_before = evaluate_module(classifier, val_examples, exact_match_metric)
    print(f"   Score: {score_before:.2%}\n")
    
    # Optimiser avec GEPA
    print("üß¨ Lancement de l'optimisation GEPA...")
    print("   (Cela peut prendre 5-10 minutes avec Ollama)\n")
    
    try:
        from dspy.teleprompt import GEPA

        # Configuration GEPA pour DSPy 3.0+
        # GEPA n√©cessite un mod√®le de r√©flexion pour analyser les erreurs
        reflection_lm = dspy.LM(
            model='ollama_chat/llama3.1:8b',
            api_base='http://localhost:11434',
            temperature=1.0,  # Plus de cr√©ativit√© pour la r√©flexion
            max_tokens=8000
        )

        # 'light' = optimisation rapide, 'medium' = √©quilibr√©, 'heavy' = approfondi
        optimizer = GEPA(
            metric=exact_match_metric,
            auto='light',  # √âquivalent √† breadth=5, depth=2 dans l'ancienne API
            reflection_lm=reflection_lm,
        )

        optimized_classifier = optimizer.compile(
            classifier,
            trainset=train_examples,
            valset=val_examples
        )
        
        print("‚úÖ Optimisation termin√©e!\n")
        
        # √âvaluer APR√àS optimisation
        print("üìä √âvaluation APR√àS optimisation...")
        score_after = evaluate_module(optimized_classifier, val_examples, exact_match_metric)
        print(f"   Score: {score_after:.2%}\n")
        
        # R√©sum√©
        improvement = ((score_after - score_before) / score_before) * 100
        print(f"üìà Am√©lioration: {improvement:+.1f}%")
        
        return optimized_classifier
        
    except ImportError:
        print("‚ùå GEPA non disponible dans cette version de DSPy")
        print("   Installez la derni√®re version: pip install -U dspy-ai")
        return None

# =============================================================================
# Fonction d'√©valuation
# =============================================================================

def evaluate_module(module, examples, metric):
    """√âvalue un module DSPy sur un ensemble d'exemples"""
    total_score = 0
    
    for example in examples:
        prediction = module(ticket=example.ticket)
        score = metric(example, prediction)
        total_score += score
    
    return total_score / len(examples)

# =============================================================================
# Exemple 2 : Optimisation avanc√©e avec param√®tres personnalis√©s
# =============================================================================

def run_advanced_gepa_optimization():
    """
    Exemple avanc√© avec param√®tres GEPA personnalis√©s
    """
    print("\n" + "="*70)
    print("üöÄ Optimisation GEPA - Configuration avanc√©e")
    print("="*70 + "\n")
    
    setup_for_gepa()
    
    # Pr√©parer les donn√©es
    train_examples = [
        dspy.Example(
            ticket=ex['ticket'],
            category=ex['category'],
            priority=ex['priority']
        ).with_inputs('ticket')
        for ex in trainset
    ]
    
    val_examples = [
        dspy.Example(
            ticket=ex['ticket'],
            category=ex['category'],
            priority=ex['priority']
        ).with_inputs('ticket')
        for ex in valset
    ]
    
    classifier = BasicClassifier()
    
    try:
        from dspy.teleprompt import GEPA

        # Configuration avanc√©e GEPA pour DSPy 3.0+
        reflection_lm = dspy.LM(
            model='ollama_chat/llama3.1:8b',
            api_base='http://localhost:11434',
            temperature=1.0,
            max_tokens=8000
        )

        optimizer = GEPA(
            metric=partial_match_metric,  # M√©trique plus nuanc√©e
            auto='medium',                # Optimisation √©quilibr√©e (plus approfondie que 'light')
            reflection_lm=reflection_lm,
        )

        print("üß¨ Optimisation avec param√®tres avanc√©s...")
        print("   - M√©trique avec correspondance partielle")
        print("   - Mode 'medium' (optimisation √©quilibr√©e)\n")
        
        optimized = optimizer.compile(
            classifier,
            trainset=train_examples,
            valset=val_examples
        )
        
        print("‚úÖ Optimisation avanc√©e termin√©e!\n")
        
        return optimized
        
    except ImportError:
        print("‚ùå GEPA non disponible")
        return None

# =============================================================================
# Exemple 3 : Inspecter les prompts optimis√©s
# =============================================================================

def inspect_optimized_prompts(optimized_module):
    """
    Affiche les prompts qui ont √©t√© g√©n√©r√©s par GEPA
    Utile pour comprendre ce qui a √©t√© am√©lior√©
    """
    print("\n" + "="*70)
    print("üîç Inspection des prompts optimis√©s")
    print("="*70 + "\n")
    
    # DSPy stocke les prompts dans les predictors
    if hasattr(optimized_module, 'classifier'):
        predictor = optimized_module.classifier
        
        # Afficher le prompt syst√®me
        if hasattr(predictor, 'extended_signature'):
            print("üìù Signature optimis√©e:")
            print(predictor.extended_signature)
            print()
        
        # Afficher les exemples de d√©monstration
        if hasattr(predictor, 'demos'):
            print(f"üìö Exemples de d√©monstration ({len(predictor.demos)}):")
            for i, demo in enumerate(predictor.demos[:3], 1):  # Afficher les 3 premiers
                print(f"\n   Exemple {i}:")
                print(f"   Input: {demo.ticket[:100]}...")
                print(f"   Output: {demo.category} | {demo.priority}")
            print()

# =============================================================================
# Conseils pour utiliser GEPA efficacement
# =============================================================================

"""
üí° CONSEILS POUR GEPA :

1. DONN√âES
   ‚úÖ Avoir au moins 10-20 exemples d'entra√Ænement
   ‚úÖ Donn√©es de validation s√©par√©es (pas dans train)
   ‚úÖ Exemples repr√©sentatifs de la production

2. M√âTRIQUE
   ‚úÖ Simple et claire (0 √† 1)
   ‚úÖ Capture ce qui est important pour vous
   ‚úÖ Rapide √† calculer

3. BUDGET
   ‚úÖ Plus de breadth = plus de candidats = meilleure optimisation (mais plus lent)
   ‚úÖ Commencer avec breadth=5, augmenter si besoin
   ‚úÖ depth contr√¥le le nombre d'it√©rations (2-3 est g√©n√©ralement bon)
   ‚úÖ Avec Ollama local : 5-10 min par run

4. IT√âRATION
   ‚úÖ Commencer simple, complexifier progressivement
   ‚úÖ Sauvegarder les mod√®les optimis√©s
   ‚úÖ Tester sur nouveaux exemples pour valider

5. MOD√àLES
   ‚úÖ Task model : Le mod√®le que vous optimisez (peut √™tre petit)
   ‚úÖ Avec Ollama local : Utiliser le m√™me mod√®le
   
PARAM√àTRES GEPA (DSPy 3.0+) :
- auto : Budget d'optimisation ('light', 'medium', 'heavy')
  * light : optimisation rapide (quelques minutes)
  * medium : optimisation √©quilibr√©e (10-15 min)
  * heavy : optimisation approfondie (20+ min)
- metric : Fonction d'√©valuation retournant 0-1 ou {'score': float, 'feedback': str}
- max_full_evals : Alternative √† auto, nombre max d'√©valuations compl√®tes
- max_metric_calls : Alternative √† auto, nombre max d'appels √† la m√©trique
"""

# =============================================================================
# MAIN : Lancer les exemples
# =============================================================================

if __name__ == "__main__":
    print("\nüéì Guide GEPA : Optimisation automatique de prompts")
    
    # Choix de l'exemple √† ex√©cuter
    print("\n" + "="*70)
    print("Choisissez un exemple :")
    print("1. Optimisation basique (recommand√© pour d√©buter)")
    print("2. Optimisation avanc√©e (avec param√®tres personnalis√©s)")
    print("3. Juste afficher les conseils")
    print("="*70 + "\n")
    
    choice = input("Votre choix (1-3) : ").strip()
    
    if choice == "1":
        optimized = run_basic_gepa_optimization()
        if optimized:
            inspect_optimized_prompts(optimized)
    
    elif choice == "2":
        optimized = run_advanced_gepa_optimization()
        if optimized:
            inspect_optimized_prompts(optimized)
    
    else:
        print("\nüìö Consultez les commentaires dans ce fichier pour les conseils GEPA!")
    
    print("\n" + "="*70)
    print("‚ú® Pour en savoir plus sur GEPA:")
    print("   üìÑ Paper: https://arxiv.org/abs/2507.19457")
    print("   üíª GitHub: https://github.com/gepa-ai/gepa")
    print("   üìñ Docs: https://dspy-docs.vercel.app/")
    print("="*70 + "\n")
