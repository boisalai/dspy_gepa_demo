"""
Version simplifi√©e et robuste de DSPy + GEPA + Ollama
Cette version √©vite les probl√®mes de compatibilit√© avec les attributs

Usage: python main_simple.py
"""

import dspy
from data import trainset, valset, CATEGORIES, PRIORITIES

# =============================================================================
# Configuration du mod√®le
# =============================================================================

print("üöÄ Configuration de DSPy avec Ollama...")

lm = dspy.LM(
    model='ollama_chat/llama3.1:8b',
    api_base='http://localhost:11434',
    temperature=0.3
)

dspy.configure(lm=lm)
print("‚úÖ Ollama configur√© avec succ√®s!\n")

# =============================================================================
# D√©finir la signature (entr√©es/sorties)
# =============================================================================

class TicketSignature(dspy.Signature):
    """Classifier un ticket de support IT selon sa cat√©gorie et sa priorit√©."""
    ticket = dspy.InputField(desc="Description du ticket de support IT")
    category = dspy.OutputField(desc=f"Cat√©gorie parmi: {', '.join(CATEGORIES)}")
    priority = dspy.OutputField(desc=f"Priorit√© parmi: {', '.join(PRIORITIES)}")

# =============================================================================
# Cr√©er un module simple avec Predict (plus robuste)
# =============================================================================

class TicketClassifier(dspy.Module):
    def __init__(self):
        super().__init__()
        # Utilise Predict au lieu de ChainOfThought pour plus de compatibilit√©
        self.classifier = dspy.Predict(TicketSignature)
    
    def forward(self, ticket):
        # Appel simple et robuste
        return self.classifier(ticket=ticket)

# =============================================================================
# Tester le mod√®le
# =============================================================================

print("üìä Test du mod√®le sur quelques exemples...\n")

classifier = TicketClassifier()

# Tester sur les 3 premiers exemples
for i, example in enumerate(valset[:3], 1):
    print(f"--- Exemple {i} ---")
    print(f"üìù Ticket: {example['ticket']}")
    
    try:
        prediction = classifier(ticket=example['ticket'])
        
        print(f"‚ú® Pr√©diction: {prediction.category} | {prediction.priority}")
        print(f"‚úÖ Attendu: {example['category']} | {example['priority']}")
        
        # V√©rifier si correct
        category_ok = prediction.category.strip().lower() == example['category'].strip().lower()
        priority_ok = prediction.priority.strip().lower() == example['priority'].strip().lower()
        
        if category_ok and priority_ok:
            print("üéØ Correct!")
        elif category_ok or priority_ok:
            print("üü° Partiellement correct")
        else:
            print("‚ùå Incorrect")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    print()

# =============================================================================
# √âvaluation compl√®te
# =============================================================================

print("="*70)
print("üìà √âvaluation sur l'ensemble de validation complet")
print("="*70 + "\n")

correct_both = 0
correct_category = 0
correct_priority = 0
total = len(valset)

for example in valset:
    try:
        prediction = classifier(ticket=example['ticket'])
        
        category_match = prediction.category.strip().lower() == example['category'].strip().lower()
        priority_match = prediction.priority.strip().lower() == example['priority'].strip().lower()
        
        if category_match and priority_match:
            correct_both += 1
        if category_match:
            correct_category += 1
        if priority_match:
            correct_priority += 1
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur sur un exemple: {e}")
        continue

print(f"R√©sultats sur {total} tickets:")
print(f"  ‚Ä¢ Cat√©gorie correcte: {correct_category}/{total} ({correct_category/total*100:.1f}%)")
print(f"  ‚Ä¢ Priorit√© correcte: {correct_priority}/{total} ({correct_priority/total*100:.1f}%)")
print(f"  ‚Ä¢ Les deux correctes: {correct_both}/{total} ({correct_both/total*100:.1f}%)")
print()

# =============================================================================
# Exemples interactifs
# =============================================================================

print("="*70)
print("üí° Exemples de classification en temps r√©el")
print("="*70 + "\n")

test_tickets = [
    "Mon ordinateur portable ne s'allume plus. J'ai une pr√©sentation client dans 1 heure!",
    "Je voudrais installer Zoom quand vous aurez le temps.",
    "Le serveur principal est en panne. Toute la production est arr√™t√©e!",
    "Ma souris sans fil ne marche plus tr√®s bien. Les piles sont peut-√™tre faibles.",
]

for i, ticket in enumerate(test_tickets, 1):
    print(f"{i}. üìù {ticket}")
    try:
        result = classifier(ticket=ticket)
        print(f"   ‚ûú Cat√©gorie: {result.category}")
        print(f"   ‚ûú Priorit√©: {result.priority}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    print()

# =============================================================================
# Guide pour aller plus loin
# =============================================================================

print("="*70)
print("‚ú® Prochaines √©tapes")
print("="*70)
print("""
1. üîÑ Tester avec d'autres mod√®les :
   - ollama pull mistral:7b
   - Modifier model='ollama_chat/mistral:7b' dans le code

2. üìö Ajouter plus de donn√©es :
   - √âditer data.py pour ajouter vos propres exemples
   - Plus de donn√©es = meilleure pr√©cision

3. üß¨ Optimiser avec GEPA :
   - Voir gepa_guide.py pour l'optimisation automatique
   - Am√©lioration typique : +10-20%

4. üéØ Adapter √† votre cas :
   - Modifier TicketSignature pour vos besoins
   - Changer les cat√©gories et priorit√©s
   - Ajuster la m√©trique d'√©valuation

üìñ Documentation compl√®te : Voir README.md
""")

print("‚úÖ D√©mo termin√©e avec succ√®s!")
